package com.anil.crm.web.mappers;

import com.anil.crm.domain.Customer;
import com.anil.crm.web.models.CustomerDto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

/**
 * Maps between Customer entity and CustomerDto.
 * Declared as a Spring component for dependency injection.
 */
@Mapper(componentModel = "spring")
public interface CustomerMapper {

    /**
     * Converts Customer Entity to CustomerDto (for responses).
     */
    @Mapping(target = "password", ignore = true) // Never map password to DTO
    @Mapping(target = "id", source = "id")           // Explicit mapping (Customer.id -> Dto.id)
    @Mapping(target = "phone", source = "phone")       // Explicit mapping (Customer.phone -> Dto.phone)
    @Mapping(target = "createdAt", source = "createdAt") // Explicit mapping
    @Mapping(target = "updatedAt", source = "updatedAt") // Explicit mapping
    @Mapping(target = "firstName", source = "user.firstName") // Map from nested User object
    @Mapping(target = "lastName", source = "user.lastName")   // Map from nested User object
    @Mapping(target = "email", source = "user.email")         // Map from nested User object
    CustomerDto customerToCustomerDto(Customer customer);

    /**
     * Converts CustomerDto to Customer Entity (partial, for requests).
     * Password and Role are ignored as they should be set in the service layer.
     * Timestamps and ID/Version are ignored as they are managed by JPA/database.
     */
    @Mapping(target = "phone", source = "phone")           // Explicit mapping added
    @Mapping(target = "user.firstName", source = "firstName")
    @Mapping(target = "user.lastName", source = "lastName")
    @Mapping(target = "user.email", source = "email")
    @Mapping(target = "user.password", ignore = true)     // Ignore password (set/hashed in service)
    @Mapping(target = "user.role", ignore = true)         // Ignore role (set in service)
    @Mapping(target = "id", ignore = true)                // Ignore ID (generated by DB)
    @Mapping(target = "version", ignore = true)           // Ignore version (managed by JPA)
    @Mapping(target = "createdAt", ignore = true)         // Ignore createdAt (managed by JPA/DB)
    @Mapping(target = "updatedAt", ignore = true)         // Ignore updatedAt (managed by JPA/DB)
    @Mapping(target = "user.id", ignore = true)           // Ignore user ID (set via association)
    Customer customerDtoToCustomer(CustomerDto dto);
}